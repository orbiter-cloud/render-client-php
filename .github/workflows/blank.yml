# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

on:
  - pull_request
  - push

name: CI

#env:
#COMPOSER_ROOT_VERSION: "10.0-dev"

jobs:
  #  coding-guidelines:
  #    name: Coding Guidelines
  #
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #
  #      - name: Install PHP
  #        uses: shivammathur/setup-php@v2
  #        with:
  #          php-version: 8.0
  #          coverage: none
  #          tools: none
  #
  #      - name: Run php-cs-fixer
  #        uses: docker://oskarstark/php-cs-fixer-ga
  #        with:
  #          args: --dry-run --show-progress=dots --using-cache=no --verbose
  #        #run: ./tools/php-cs-fixer fix --dry-run --show-progress=dots --using-cache=no --verbose

  #  type-checker:
  #    name: Type Checker
  #
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - name: Checkout
  #        uses: actions/checkout@v2
  #
  #      - name: Install PHP
  #        uses: shivammathur/setup-php@v2
  #        with:
  #          php-version: 8.0
  #          coverage: none
  #          tools: none
  #
  #      - name: Update dependencies with composer
  #        uses: php-actions/composer@v6
  #        with:
  #          command: update
  #          args: --no-ansi --no-interaction --no-progress
  #
  #      #- name: Run vimeo/psalm on public API
  #      - name: Run vimeo/psalm
  #        uses: docker://vimeo/psalm-github-actions
  #        with:
  #          security_analysis: true
  #        #run: ./tools/psalm --config=.psalm/static-analysis.xml --no-progress --show-info=false
  #
  #        #- name: Run vimeo/psalm on internal code
  #        #run: ./tools/psalm --config=.psalm/config.xml --no-progress --shepherd --show-info=false --stats

  tests:
    name: Tests

    runs-on: ${{ matrix.os }}

    env:
      PHP_EXTENSIONS: dom, json, libxml, mbstring, pdo_sqlite, soap, xml, xmlwriter, :apcu, :imagick
      PHP_INI_VALUES: memory_limit=-1, assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          # todo: test windows when php-actions/composer issue is solved https://github.com/php-actions/composer/issues/43
          #- windows-latest

        php-version:
          - "8.0"
          - "8.1"

        compiler:
          - default

        dependencies:
          #- lowest
          - highest

        include:
          - os: ubuntu-latest
            php-version: "8.0"
            compiler: jit
            dependencies: highest

          - os: ubuntu-latest
            php-version: "8.1"
            compiler: jit
            dependencies: highest

    steps:
      - name: Configure git to avoid issues with line endings
        if: matrix.os == 'windows-latest'
        run: git config --global core.autocrlf false

      - name: Checkout
        uses: actions/checkout@v2

      - name: Override PHP ini values for JIT compiler
        if: matrix.compiler == 'jit'
        run: echo "PHP_INI_VALUES::assert.exception=1, memory_limit=-1, zend.assertions=1, opcache.enable=1, opcache.enable_cli=1, opcache.optimization_level=-1, opcache.jit=1255, opcache.jit_buffer_size=32M" >> $GITHUB_ENV

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_VALUES }}
          tools: none

      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        uses: php-actions/composer@v6
        with:
          command: update
          args: --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        if: matrix.dependencies == 'highest'
        uses: php-actions/composer@v6
        with:
          command: update
          args: --no-ansi --no-interaction --no-progress

      - name: Run tests with phpunit
        uses: php-actions/phpunit@v3
        with:
          configuration: phpunit-ci.xml
          bootstrap: vendor/autoload.php
          #args: --bootstrap=vendor/autoload.php

  code-coverage:
    name: Code Coverage

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - 8.0

        dependencies:
          - highest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          coverage: pcov
          extensions: dom, json, libxml, mbstring, pdo_sqlite, soap, xml, xmlwriter, :apcu, :imagick
          ini-values: assert.exception=1, zend.assertions=1, error_reporting=-1, log_errors_max_len=0, display_errors=On
          tools: none

      - name: Install lowest dependencies with composer
        if: matrix.dependencies == 'lowest'
        uses: php-actions/composer@v6
        with:
          command: update
          args: --no-ansi --no-interaction --no-progress --prefer-lowest

      - name: Install highest dependencies with composer
        if: matrix.dependencies == 'highest'
        uses: php-actions/composer@v6
        with:
          command: update
          args: --no-ansi --no-interaction --no-progress

      - name: Collect code coverage with phpunit
        uses: php-actions/phpunit@v3
        with:
          configuration: phpunit-ci.xml
          php_extensions: xdebug mbstring xml
          bootstrap: vendor/autoload.php
          args: --coverage-clover=coverage.xml
        env:
          XDEBUG_MODE: coverage

      - name: Send code coverage report to Codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
